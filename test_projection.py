import numpy as np
from scipy.spatial.transform import Rotation as R


"""

fit {325.5,-0.58},{455.5,-0.43},{565.5,-0.33},{1015.5,0.29},{1197.5,0.44}
-1.30264×10^-9 x^3 + 2.85459×10^-6 x^2 - 0.000669286 x - 0.613569 (cubic)

fit {456.5,0.99},{498.5,1.06},{685,1.35},{692,1.36},{753.5,1.45},{685,1.35}
-1.20679×10^-6 x^2 + 0.00252203 x + 0.0488149 (cubic)


2,23755
0,0
2,49211
0
0,85836
3,13435


[ -0.6536623, -0.0047343,  0.7567716;
   0.0072426, -0.9999738,  0.0000000;
   0.7567517,  0.0054810,  0.6536794 ]
 
 
{{1.0, 0.0, 1629/2}, {0.0, 1.0, 0.0, 861/2}, {1.0, 1.0, 1.0}}  
{ {-0.6536623, -0.0047343,  0.7567716, 2.23755}, {0.0072426, -0.9999738,  0.0000000, 0.0}, {0.7567517,  0.0054810,  0.6536794, 2.49211}}
{}

{{1.0, 0.0, 1629/2}, {0.0, 1.0, 0.0, 861/2}, {1.0, 1.0, 1.0}} * { {-0.6536623, -0.0047343,  0.7567716, 2.23755}, {0.0072426, -0.9999738,  0.0000000, 0.0}, {0.7567517,  0.0054810,  0.6536794, 2.49211}} * {{0.86}, {0.44}, {0.7}, {1.0}}}


{{1,0,814.5,0},{0,1,430.5,0},{0,0,1,0},{0,0,0,0}}{{-0.6536623,-0.0047343,0.7567716,2.23755},{0.0072426,-0.9999738,0,0},{0.7567517,0.0054810,0.6536794,2.49211},{0,0,0,0}}{{0.86},{0.44},{0.7},{1}}

{{1,0,814.5},{0,1,430.5},{0,0,1}}{{-0.6536623,-0.0047343,0.7567716,2.23755},{0.0072426,-0.9999738,0,0},{0.7567517,0.0054810,0.6536794,2.49211}}{{0.86},{0.44},{0.7},{1}}



"""


r_euler = np.array([0, 0.85836, 3.13435])
t_c = np.array([2.23755, 0, 2.49211])
# c = np.array([0.86, -0.38, 0.75])
# c = np.array([1.21, -0.675, 0.75])
c = np.array([0.0, -1.0, 0.75]) # 300, 156
# c = np.array([1.2, 1.0, 0.75]) # 1518, 680

r = np.asarray( R.from_euler('XYZ', r_euler, degrees=False).inv().as_matrix() )
t = np.array([t_c]).transpose() * -1

# P = K * Rt * C

# cx = 1630 /2 
# cy = 860 / 2
cx = 0 
cy = 0

fx = 680
fy = 740

K = np.array([[fx, 0, cx],
              [0, fy, cy],
              [0, 0, 1]])

Rt = np.c_[r, t]

C = np.c_[np.array([c]), np.array([1])].transpose()

print(K)
print(Rt)
print(C)

P = np.matmul(K, np.matmul(Rt, C))
# print(P)

u = P[0][0]/P[2][0]
v = P[1][0]/P[2][0]
print(f"u,v = ({u:.0f}, {v:.0f})")


r_euler = np.array([0, 0.85836, 3.13435])
t_c = np.array([2.23755, 0, 2.49211])


print("NEWW")



r = R.from_euler('XYZ', r_euler, degrees=False)
r_m = r.inv().as_matrix()
print(r_m)

Rc = R.from_euler('XYZ', r_euler, degrees=False).as_matrix()
print("Rc\n:", Rc)
C = np.array([t_c]).transpose()
print("C:\n", C)
# M = np.vstack( (np.hstack((Rc, C)), np.array([0, 0, 0, 1])) )
# EM = np.linalg.inv(M)
# print(EM)
R = Rc.transpose()
print("R:\n", R)
t = -1 * np.matmul(R, C)
print("t:\n", t)

x0 = 1630/2
y0 = 860/2
fx = 1000
fy = 1000
s = 0

two_d_translation = np.array([[1, 0, x0],
                        [0, 1, y0],
                        [0, 0, 1]])

two_d_scaling = np.array([[fx, 0, 0],
                    [0, fy, 0],
                    [0, 0, 1]])

two_d_shear = np.array([[1, s/fx, 0],
                  [0, 1, 0],
                  [0, 0, 1]])

K = np.matmul( np.matmul(two_d_translation, two_d_scaling), two_d_shear)
print("K:", K)

three_d_translation = np.hstack( (np.identity(3),t) )
print("three_d_translation:\n", three_d_translation)
three_d_rotation = np.hstack( (np.vstack((R,np.zeros((1,3)))), np.array([[0], [0], [0], [1]])) )
print("three_d_rotation:\n", three_d_rotation)
EM = np.matmul( three_d_translation, three_d_rotation )

P = np.matmul(K, EM)
print("P:\n", P)

# c = np.array([0.86, -0.38, 0.75])
# c = np.array([1.21, -0.675, 0.75])
# c = np.array([0.0, -1.0, 0.75]) # 300, 156
# c = np.array([1.2, 1.0, 0.75]) # 1518, 680

c_s = [
    np.array([0.86, -0.38, 0.75]),
    np.array([1.21, -0.675, 0.75]),
    np.array([0.0, -1.0, 0.75]),
    np.array([1.2, 1.0, 0.75]),
]
for c in c_s:
    O = np.vstack((np.array([c]).transpose(), [[1]]))
    # print("O:\n", O)
    print("O: ", O.transpose())
    U = np.matmul(P, O)

    # print("U:\n", U)

    u = U[0][0]/U[2][0]
    v = U[1][0]/U[2][0]
    print(f"u,v = ({u:.0f}, {v:.0f})")

######################################

# 2,23755
# 0,0
# 2,49211
# 0
# 0,85836
# 3,13435


# [ -0.6536623, -0.0047343,  0.7567716;
#    0.0072426, -0.9999738,  0.0000000;
#    0.7567517,  0.0054810,  0.6536794 ]
 
 
# {{1.0, 0.0, 1629/2}, {0.0, 1.0, 0.0, 861/2}, {1.0, 1.0, 1.0}}  
# { {-0.6536623, -0.0047343,  0.7567716, 2.23755}, {0.0072426, -0.9999738,  0.0000000, 0.0}, {0.7567517,  0.0054810,  0.6536794, 2.49211}}
# {}

# {{1.0, 0.0, 1629/2}, {0.0, 1.0, 0.0, 861/2}, {1.0, 1.0, 1.0}} * { {-0.6536623, -0.0047343,  0.7567716, 2.23755}, {0.0072426, -0.9999738,  0.0000000, 0.0}, {0.7567517,  0.0054810,  0.6536794, 2.49211}} * {{0.86}, {0.44}, {0.7}, {1.0}}}


# {{1,0,814.5,0},{0,1,430.5,0},{0,0,1,0},{0,0,0,0}}{{-0.6536623,-0.0047343,0.7567716,2.23755},{0.0072426,-0.9999738,0,0},{0.7567517,0.0054810,0.6536794,2.49211},{0,0,0,0}}{{0.86},{0.44},{0.7},{1}}

# {{1,0,814.5},{0,1,430.5},{0,0,1}}{{-0.6536623,-0.0047343,0.7567716,2.23755},{0.0072426,-0.9999738,0,0},{0.7567517,0.0054810,0.6536794,2.49211}}{{0.86},{0.44},{0.7},{1}}
